{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_LIST_START, FETCH_LIST_FAIL, FETCH_LIST_SUCCESS_APPEND, FETCH_LIST_SUCCESS_REPLACE, UPDATE_LIST_QUERY, CLEAN_LIST_LIST } from '../reducers/types';\n\nconst fetchListStart = () => ({\n  type: FETCH_LIST_START\n});\n\nconst fetchListFail = error => ({\n  type: FETCH_LIST_FAIL,\n  error\n});\n\nconst fetchListSuccessAppend = list => ({\n  type: FETCH_LIST_SUCCESS_APPEND,\n  list\n});\n\nconst fetchListSuccessReplace = list => ({\n  type: FETCH_LIST_SUCCESS_REPLACE,\n  list\n});\n\nexport const updateListQuery = query => ({\n  type: UPDATE_LIST_QUERY,\n  query\n});\nexport const cleanSoldierList = () => ({\n  type: CLEAN_LIST_LIST\n});\nexport const fetchSoldierList = (replace = false) => (dispatch, getState) => {\n  const endPoint = \"http://localhost:4000/api/soldiers\";\n  const query = getState().soldierList.query;\n  const url = Object.entries(query).reduce((a, [key, val]) => {\n    return `${a}${key}=${val}&`;\n  }, `${endPoint}?`);\n  dispatch(fetchListStart());\n  return axios.get(`${url}`).then(res => {\n    if (replace) {\n      dispatch(fetchListSuccessReplace(res.data));\n    } else {\n      dispatch(fetchListSuccessAppend(res.data));\n    }\n\n    return res;\n  }).catch(() => {\n    dispatch(fetchListFail({\n      message: \"Fetching soldier list failed\"\n    }));\n  });\n};","map":{"version":3,"sources":["/Users/caroline/Desktop/interview/practice/us-army/src/client/redux/action-creators/soldier-list.js"],"names":["axios","FETCH_LIST_START","FETCH_LIST_FAIL","FETCH_LIST_SUCCESS_APPEND","FETCH_LIST_SUCCESS_REPLACE","UPDATE_LIST_QUERY","CLEAN_LIST_LIST","fetchListStart","type","fetchListFail","error","fetchListSuccessAppend","list","fetchListSuccessReplace","updateListQuery","query","cleanSoldierList","fetchSoldierList","replace","dispatch","getState","endPoint","soldierList","url","Object","entries","reduce","a","key","val","get","then","res","data","catch","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,EAA0BC,eAA1B,EAA0CC,yBAA1C,EAAoEC,0BAApE,EAA+FC,iBAA/F,EAAiHC,eAAjH,QAAwI,mBAAxI;;AAEA,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAEP;AADsB,CAAP,CAAvB;;AAIA,MAAMQ,aAAa,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,IAAI,EAAEN,eADwB;AAE9BQ,EAAAA;AAF8B,CAAL,CAA3B;;AAKA,MAAMC,sBAAsB,GAAGC,IAAI,KAAK;AACtCJ,EAAAA,IAAI,EAAEL,yBADgC;AAEtCS,EAAAA;AAFsC,CAAL,CAAnC;;AAKA,MAAMC,uBAAuB,GAAGD,IAAI,KAAK;AACvCJ,EAAAA,IAAI,EAAEJ,0BADiC;AAEvCQ,EAAAA;AAFuC,CAAL,CAApC;;AAKA,OAAO,MAAME,eAAe,GAAGC,KAAK,KAAK;AACvCP,EAAAA,IAAI,EAAEH,iBADiC;AAEvCU,EAAAA;AAFuC,CAAL,CAA7B;AAKP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AACrCR,EAAAA,IAAI,EAAEF;AAD+B,CAAP,CAAzB;AAIP,OAAO,MAAMW,gBAAgB,GAAG,CAACC,OAAO,GAAC,KAAT,KAAmB,CAACC,QAAD,EAAUC,QAAV,KAAuB;AACxE,QAAMC,QAAQ,GAAG,oCAAjB;AACA,QAAMN,KAAK,GAAGK,QAAQ,GAAGE,WAAX,CAAuBP,KAArC;AACA,QAAMQ,GAAG,GAAGC,MAAM,CAACC,OAAP,CAAeV,KAAf,EAAsBW,MAAtB,CAA6B,CAACC,CAAD,EAAG,CAACC,GAAD,EAAKC,GAAL,CAAH,KAAiB;AACxD,WAAQ,GAAEF,CAAE,GAAEC,GAAI,IAAGC,GAAI,GAAzB;AACD,GAFW,EAET,GAAER,QAAS,GAFF,CAAZ;AAGAF,EAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACA,SAAOP,KAAK,CAAC8B,GAAN,CAAW,GAAEP,GAAI,EAAjB,EACNQ,IADM,CACDC,GAAG,IAAI;AACX,QAAId,OAAJ,EAAa;AACXC,MAAAA,QAAQ,CAACN,uBAAuB,CAACmB,GAAG,CAACC,IAAL,CAAxB,CAAR;AACD,KAFD,MAEO;AACLd,MAAAA,QAAQ,CAACR,sBAAsB,CAACqB,GAAG,CAACC,IAAL,CAAvB,CAAR;AACD;;AACD,WAAOD,GAAP;AACD,GARM,EASNE,KATM,CASA,MAAM;AACXf,IAAAA,QAAQ,CAACV,aAAa,CAAC;AAAE0B,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAd,CAAR;AACD,GAXM,CAAP;AAYD,CAnBM","sourcesContent":["import axios from 'axios';\r\n\r\nimport { FETCH_LIST_START,FETCH_LIST_FAIL,FETCH_LIST_SUCCESS_APPEND,FETCH_LIST_SUCCESS_REPLACE,UPDATE_LIST_QUERY,CLEAN_LIST_LIST } from '../reducers/types';\r\n\r\nconst fetchListStart = () => ({\r\n  type: FETCH_LIST_START\r\n});\r\n\r\nconst fetchListFail = error => ({\r\n  type: FETCH_LIST_FAIL,\r\n  error\r\n});\r\n\r\nconst fetchListSuccessAppend = list => ({\r\n  type: FETCH_LIST_SUCCESS_APPEND,\r\n  list\r\n});\r\n\r\nconst fetchListSuccessReplace = list => ({\r\n  type: FETCH_LIST_SUCCESS_REPLACE,\r\n  list\r\n});\r\n\r\nexport const updateListQuery = query => ({\r\n  type: UPDATE_LIST_QUERY,\r\n  query\r\n});\r\n\r\nexport const cleanSoldierList = () => ({\r\n  type: CLEAN_LIST_LIST\r\n});\r\n\r\nexport const fetchSoldierList = (replace=false) => (dispatch,getState) => {\r\n  const endPoint = \"http://localhost:4000/api/soldiers\";\r\n  const query = getState().soldierList.query;\r\n  const url = Object.entries(query).reduce((a,[key,val]) => {\r\n    return `${a}${key}=${val}&`;\r\n  },`${endPoint}?`);\r\n  dispatch(fetchListStart());\r\n  return axios.get(`${url}`)\r\n  .then(res => {\r\n    if (replace) {\r\n      dispatch(fetchListSuccessReplace(res.data));\r\n    } else {\r\n      dispatch(fetchListSuccessAppend(res.data));\r\n    }\r\n    return res;\r\n  })\r\n  .catch(() => {\r\n    dispatch(fetchListFail({ message: \"Fetching soldier list failed\" }));\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}